package com.ccgautomation.utilities;

import com.ccgautomation.data.Point;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

/*
    In WebCTRL version 8.0, a CSV File containing one downloaded trend is formatted as:
    Line 1      Trend Path and Reference Name
    Line 2      Field Header
    Line 3+     Date, Excel Date, Value, Notes

    A record that has notes does not have a value causing the "Value" to be a string of zero length
    when a note is present.  These records should be skipped.

 */

public class WebCTRLCSVTrendFileTools {

    /**
     * Reads data in from a downloaded WebCTRL Trend CSV file (single trend) and converts it to a list of Points.
     * @param data List collection of strings created from a CSV File generated by WebCTRL.
     * @return List collection of Point objects of the corresponding trend points.
     */
    protected List<Point> preprocessMeterData(List<String> data) {
        if (ifDataIsNull(data)) return new ArrayList<>();
        if (dataDoesNotContainsADataRecord(data)) return new ArrayList<>();
        removePathAndHeadingFromData(data);
        return convertDataIntoResults(data);
    }

    private List<Point> convertDataIntoResults(List<String> data) {
        List<Point> results = new ArrayList<>();
        DateTools dateTools = new DateTools(Configuration.trendCSVFileDatePattern);
        for(String s : data) {
            String[] fields = StringTools.removeDoubleQuotesFromStrings(s).split(",");
            if (fieldsDoesNotContainsAValue(fields)) {
                continue; // Skip!
            }
            String dateString = dateTools.removeDecimalPortionOfSeconds(fields[0]);
            String valueString = getValueFromStringArray(fields);
            addPointToPointList(results, dateString, valueString);      // TODO:?? Is there a better way
        }
        return results;
    }

    private boolean ifDataIsNull(List<String> data) {
        return data == null;
    }

    private void addPointToPointList(List<Point> results, String dateString, String valueString) {
        try {
            results.add(new Point(dateString, valueString));
        }
        catch (ParseException ex) {
            //TODO: Fix Logger
            Logger.log(" Date ParseException: " + dateString + "," + valueString + ": " + ex.getMessage());
        }
        catch (NumberFormatException ex) {
            //TODO: Fix Logger
            Logger.log("Value NumberFormatException" + dateString + "," + valueString + ": " + ex.getMessage());
        }
        catch (NullPointerException ex) {
            //TODO: Fix Logger
            Logger.log("NullPointerException" + dateString + "," + valueString + ": " + ex.getMessage());
        }
    }

    protected void removePathAndHeadingFromData(List<String> stringList) {
        stringList.remove(0);
        stringList.remove(0);
    }

    /*
      The first two lines of the file are the path of the trend and the data headers.  More than 2 records
      are needed for data to be present.
     */
    protected boolean dataDoesNotContainsADataRecord(List<String> data) {
        return data.size() < 3;
    }

    protected String getValueFromStringArray(String[] fields){
       return fields[2];
    }

    protected boolean fieldsDoesNotContainsAValue(String[] fields) {
        return (recordDoesNotContainsAValueField(fields) ||
                valueFieldIsNull(fields) ||
                valueFieldIsZeroLength(fields));
    }

    private boolean valueFieldIsZeroLength(String[] fields) {
        return fields[2].length() == 0;
    }

    private boolean valueFieldIsNull(String[] fields) {
        return fields[2] == null;
    }

    private boolean recordDoesNotContainsAValueField(String[] fields) {
        return fields.length < 3;
    }

}
